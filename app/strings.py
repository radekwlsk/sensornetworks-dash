WIRELESS_SENSOR_NETWORK = """\
Created by a group of sensors (*nodes*) scattered across vast area that monitor and collect environment data over 
extended periods of time the **wireless sensor networks** are very limited in resources. Main characteristics of such 
networks are:

  - power consumption constraint (battery supplied, passive energy harvesting),
  - nodes failures resilience (must operate even when fraction of nodes fail),
  - limited computational power (strong, hard cryptography protocols are not available),
  - limited memory (can not store or process lot of big variables),
  - unattended operation without network infrastructure (all nodes are the same and have to establish connection on 
their own once deployed in random places over the area).

Given those limitations it is still critical to provide security of processed and transmitted data. As authentication 
protocols used in large networks (like WiFi, LTE) are based on hard computational problems they are not suitable for 
wireless sensor networks.

Easiest way to encrypt and authenticate the communication between the nodes of such network is to store single shared 
private key. But such approach compromises entire network on breach of single node's secret. To tackle this problem 
various protocols were proposed, one of them being *A Key-Management Scheme for Distributed Sensor Networks* proposed 
by **Laurent Eschenauer** and **Virgil D. Gligor** that allows increased security without sacrificing a lot of memory 
and requiring little computational power."""

ALGORITHM = """\
As described in [A Key-Management Scheme for Distributed Sensor Networks]({}) (Chapter 2) a 3-step approach can be 
used for key distribution:

  1. Key pre-distribution:
    - key pool *P* generation,
    - random drawing of *k* keys out of *P* without replacement at random for each node,
    - loading of the selected keys to each node's memory.
  2. Shared-key discovery:
    - after nodes deployment,
    - each node broadcasts its keys to find all nodes in range that it shares at least one key with creating *link*,
    - network topology is established after that step.
  3. Path-key establishment:
    - assigns *path-key* to node pairs that do not share a key but are connected by two or more links after shared-key 
  discovery phase.""".format("https://people.eecs.berkeley.edu/~dawnsong/papers/key-dist.pdf")

SIMULATION = """\
This application allows for simulating first 2 phases of the algorithm, giving information about direct links coverage, 
total coverage and number of components in a wireless sensor network that adopts this approach. Parameters of the 
network are:

  - *n*: number of nodes (size of the network),
  - *s*: size of key pool *P*,
  - *k*: number of randomly selected keys from the key pool *P* stored in each node,
  - *x*: dimension of a grid on which it is deployed,
  - *r*: transmission range of each node (calculated in Manhattan distance).
  
Each parameter changes the network's security and topology, the goal is to provide best key protection, lowest 
requirements with highest total network coverage. 

To see how change of each parameter affects the coverage one can use provided plots generators in 
[**Coverage** section](#coverage) and find details about their impact on security. 

A network topology using such key distribution protocol can be simulated in [**Network Graph** section](#network)."""

COVERAGE = """\
Statistics for coverage are generated by simulating couple of random networks with selected parameters for multiple values of 
the tested one. Then harmonic mean of all direct coverage, total coverage and components amount results is taken for 
each tested value and presented on a plot."""

KEYS = """\
The more keys stored in each node the easier it is to find common one with nearby nodes. On the other hand more keys 
stored means high impact on security in case of node compromise. 

With high amount of keys stored in a node once its keys are recovered by third party all of them have to get revoked by 
remaining nodes. That can lead to the opposite situation when each node (or at least huge part of them) is left with 
only few secure keys.

Once all network parameters are selected finding the minimal amount of keys to store in each node for near 100% 
coverage is required. That can be done using this test."""

POOL = """\
Bigger key pool increases security of the system as they do not repeat so often between the nodes. But bigger pool 
also means lower probability of two nodes sharing a key, which decreases network coverage."""

DIM = """\
Vast area to cover requires more nodes to be deployed or stronger antennas. One has to optimize those aspects when 
designing a wireless sensor network."""

NODES = """\
More nodes means better coverage as distances between them get smaller. Also probability of two nearby nodes sharing a 
key increases with number of nodes. Distribution of the key pool across the network also increases with number of 
nodes."""

RANGE = """\
Thanks to higher transmission range a node can find neighbours that are located further away, increasing its chances to 
find common keys. Direct coverage gets improved as well. But range comes at a cost of power consumption which is always 
a bad thing for wireless sensor network. Range has to be balanced for cost efficiency between number of nodes deployed 
and costs (and size) of bigger batteries."""

NETWORK = """\
The graph below updates automatically after change of the arguments with sliders below. 

Right part shows the network's coverage (direct and total). 

> Note that scale is not always 0-100%

Nodes belonging to one component have the same colour, sometimes the nodes can overlap as their coordinates on the 
network grid are selected at random. Links between nodes are marked as edges of the graph. 

On hover over a node its details are displayed: 

  - unique id of the node,
  - coordinates on the grid in *(x, y)* form,
  - list of node's neighbours (as id's) if any."""